# [SÃ©ance 2 : 09/09] COMPRENDRE son environnement {.unnumbered .scrollable}

::: {.content-visible when-format="html" unless-format="revealjs"}

```{=html}
<iframe src="_slides/02.html"></iframe>
```
[Ouvrir dans mon navigateur](_slides/02.html){target="_blank"} 

::: 

## Retour sur la lecture 

::: {.callout-important collapse="true"}
## Lectures obligatoires

- @sinatraHistoireHumanitesNumeriques2014

:::

## Terminal, ligne de commande 

### La ligne de commande {.scrollable}

- *Interfaces graphiques* = couche superposÃ©e Ã  une interface de communication fondamentaleÂ : la commandeÂ ; <!-- la seule comprise par l'ordinateur ; les interfaces graphiques sont elles aussi des interfaces de communication avec l'ordinateur (Bureau sous Windows ou Finder sous Mac) -->
- Le *Terminal* que nous allons manipuler fait rÃ©fÃ©rence au logiciel avec lequel nous pouvons taper des lignes de commandes afin dâ€™interagir avec le *systÃ¨me dâ€™exploitation*Â ; 
- *Shell*Â : interprÃ©teur de commandes qui sert d'intermÃ©diaire entre les utilisateurÂ·ices et le systÃ¨me d'exploitationÂ ; <!-- = coquille : utilisateurs, shell, noyau ; il interprÃ¨te le rÃ©sultat de la commande, l'exÃ©cute et retourne le rÃ©sultat Ã  l'utilisateur. -->
  - DiffÃ©rents *shells* existent, le shell par dÃ©faut de la plupart des distributions Linux & MacOS X se nomme [Bash]{.text-primary}. <!--Bash, câ€™est le nom dâ€™un interprÃ©teur de commandes (ou shell) trÃ¨s utilisÃ© dans les systÃ¨mes Linux et macOS. En gros : 1) Câ€™est un programme qui lit ce que tu tapes dans le terminal et exÃ©cute les commandes correspondantes. 2) Il permet de lancer des logiciels, de naviguer dans les dossiers, de manipuler des fichiers, etc. 3) On peut aussi Ã©crire des scripts bash (fichiers contenant une suite de commandes) pour automatiser des tÃ¢ches. 4) ğŸ‘‰ En rÃ©sumÃ© : Bash = un langage + un outil pour dialoguer avec ton ordinateur via le terminal. depuis quelques annÃ©es, macOS utilise Zsh par dÃ©faut Ã  la place de Bash. En rÃ©sumÃ© : Zsh = Bash + plein dâ€™amÃ©liorations pratiques pour rendre le terminal plus sympa et efficace.-->
- Les interfaces graphiques "traduisent" en lignes de commande les opÃ©rations que nous faisons (mais nous le cachent). 
- AvantageÂ : la ligne de commande est + rapide et + sÃ»re.  

> *OS*Â : Â« logiciel faisant office dâ€™interface [(graphique)] entre les composants informatiques et lâ€™utilisateur, qui assure notamment lâ€™exÃ©cution des programmes, lâ€™allocation des ressources matÃ©rielles et le contrÃ´le des opÃ©rations dâ€™entrÃ©e-sortie sur les pÃ©riphÃ©riques. Â» ([OQLF 2022](https://vitrinelinguistique.oqlf.gouv.qc.ca/fiche-gdt/fiche/8358548/systeme-dexploitation)).

### Exemple

CrÃ©ation d'un rÃ©pertoire (= Dossier) sur le Bureau puis y dÃ©placer un fichier que l'on vient de crÃ©er : 

1. Clic droit, Dossier > Nouveau â†’ une fenÃªtre apparaÃ®tÂ ; 
2. Saisir le nom du rÃ©pertoire (`Test`) > cliquer sur `OK`Â ; 
3. DÃ©placer le fichier `exemple.pdf` en le faisant glisser avec le bouton gauche de la souris sur l'icÃ´ne du rÃ©pertoire puis relÃ¢cher le bouton. 

CrÃ©ation d'un rÃ©pertoire (= Dossier) puis y dÃ©placer un fichier que l'on vient de crÃ©er avec la ligne de commandeÂ :  

1. ouvrir le terminalÂ ; 
2. `mkdir Test` â†’ *Enter* ; 
3. `mv exemple.pdf Test` â†’ *Enter*. 

<!-- 
Il faut bien comprendre que le rÃ´le de l'interface graphique n'est que de traduire en lignes de commande les opÃ©rations que nous effectuons Ã  l'aide de la souris. 

Explications: 
- mkdir = nom d'un programme fait pour crÃ©er des rÃ©pertoire (= make directory) â†’ nom du programme 
- travail = nom du rÃ©pertoire â†’ argument passÃ© au programme (Ã  sÃ©parer par un espace)
- EntrÃ©e = commande l'exÃ©cution du programme. 
- mv = *move*, programme dont la fonction est de dÃ©placer des fichiers ou des rÃ©pertoires ; accepte 2 arguments: 1) nom du fichier que l'on souhaite dÃ©placer, 2) rÃ©pertoire de destination de ce fichier. 

Si la syntaxe de la ligne de commande peut paraÃ®tre au premier abord difficile Ã  maÃ®triser, elle permet aussi, par sa sobriiÃ©tÃ© mÃªme, de rÃ©aliser de maniÃ¨re bien + rapide et bien + sÃ»re les opÃ©rations que l'on fait grÃ¢ce Ã  la souris. 
--> 

### La ligne de commande, plus rapide et plus sÃ»reÂ ? 

- Interface graphique = surcouche logicielleÂ â†’ ralentit le systÃ¨me d'exploitationÂ ; 
- Interface graphiqueÂ = logiciel complexeÂ â†’ *bugs*Â ; 
- Interface graphique ne contient pas *tous* les Ã©quivalents qu'a la ligne de commande -- certaines opÃ©rations ont Ã©tÃ© laissÃ©es de cÃ´tÃ© et ne pourront Ãªtre effectuÃ©es par l'utilisateurÂ·iceÂ ; 
- SÃ©quence de lignes de commande, *e.g.*: `mkdir Test ; mv exemple.pdf Test`Â ; 
- PrÃ©sence de *wildcards* dans les lignes de commande, permettant de dÃ©clencher des opÃ©rations complexes sur un grand nombre de fichiers, *e.g.*: `mv *.pdf Test` dÃ©placera tous les fichiers PDF dans le rÃ©pertoire `Test`. 

<!-- En d'autres termes, en passant par la ligne de commande, l'utilisateur gagne en sÃ©curitÃ©, en rapiditÃ© et en maÃ®trise du systÃ¨me ce qu'il perd en ergonomie. RapiditÃ© et efficacitÃ©Â ; Automatisation (scripts)Â ; ContrÃ´le avancÃ© --> 

### Testons 

- LinuxÂ : chercher *terminal* dans les *outils systÃ¨me* (raccourciÂ : `CTRL+ALT+t`)Â ; 
- MacOSÂ : chercher *terminal* dans les applications (toutes les commandes ne sont pas prÃ©sentes)Â ; 
- WindowsÂ : [installer Cygwin](https://x.cygwin.com/docs/ug/setup.html). <!-- Cygwin est un logiciel qui permet dâ€™utiliser un environnement Linux (ou Unix) sur Windows. car windows n'a pas nativement bash; fait le pont entre windows et linux pour pouvoir travailler avec les outils unix sur du windows ; si Ã§a marche pas, plan B: dÃ©marrer > "cmd" > invite de commandes avec des commandes un peu diffÃ©rentes. Sous Windows, activez le terminal/bash en suivant [ces instructions](https://korben.info/installer-shell-bash-linux-windows-10.html) ou [celles-ci](https://blog.ineat-group.com/2020/02/utiliser-le-terminal-bash-natif-dans-windows-10/). -->  

<!--
### DÃ©finition 

Le ***terminal*** que nous allons manipuler fait rÃ©fÃ©rence au logiciel avec lequel nous pouvons taper des lignes de commandes afin dâ€™interagir avec le *systÃ¨me dâ€™exploitation*.  

> Un terminal est un programme qui Ã©mule une console dans une interface graphique, il permet de lancer des commandes. ([Doc. Ubuntu](https://doc.ubuntu-fr.org/terminal))

â†’ Soit, lâ€™*OS*, le Â« logiciel faisant office dâ€™interface [(graphique)] entre les composants informatiques et lâ€™utilisateur, qui assure notamment lâ€™exÃ©cution des programmes, lâ€™allocation des ressources matÃ©rielles et le contrÃ´le des opÃ©rations dâ€™entrÃ©e-sortie sur les pÃ©riphÃ©riques. Â» ([OQLF 2022](https://vitrinelinguistique.oqlf.gouv.qc.ca/fiche-gdt/fiche/8358548/systeme-dexploitation)).
--> 

## OÃ¹ sont les fichiers sur un ordinateur ? 

- Pourquoi c'est important ? 
  - Interactions facilitÃ©s avec les diffÃ©rents fichiers constituant un projetÂ ; 
  - Liens (relatifs et/ou absolus) entre fichiers. 

<!-- Il est nÃ©cessaire d'organiser les fichiers de son ordinateur. Il faut donc, pour cela, crÃ©er des rÃ©pertoires ou des dossiers qui pourraient Ãªtre comparÃ©s Ã  des boÃ®tes de rangement. Les rÃ©pertoires sont organisÃ©s en arbre, tous contenus dans un rÃ©pertoire (la "racine") et sÃ©parÃ©s les uns des autres par un antislash sous windows ou u slash sous linuex -> passage d'un rÃ©pertoire donnÃ© Ã  l'un de ses sous-rÃ©pertoire --> 

### Arborescence {.scrollable}

- Chaque systÃ¨me dâ€™exploitation a son propre systÃ¨me dâ€™organisationÂ ; 
- Il faut comprendre les systÃ¨mes de cheminÂ ; 
- Tout est arborescence 

![Arborescence sur un systÃ¨me Ubuntu](img/tree.jpg){.lightbox height="200"}

- Votre disque dur = sorte de grande boÃ®te oÃ¹ se trouvent d'autres boÃ®tes (= rÃ©pertoires/dossiers)Â ; 
- *Racine* = boite principale contenant toutes les autres ; 
  - Mac, LinuxÂ : `/`Â ; 
  - WidowsÂ : `C:\`. 

<!--Il faut dâ€™abord comprendre comment est organisÃ© votre ordinateur et oÃ¹ se trouvent vos fichiers. Votre disque dur peut Ãªtre compris comme une grande boÃ®te dans laquelle se trouvent dâ€™autres boÃ®tes (dossiers). La boÃ®te principale est ce quâ€™on appelle Â«â€¯racineâ€¯Â». Dans un ordinateur Unix (Mac ou Linux) la racine est `/`. Dans un ordinateur Windows, la racine est `C:\`. Dans la racine vous trouvez plusieurs Â«â€¯boÃ®tesâ€¯Â».--> 

Lâ€™emplacement du Dossier correspond Ã  ce quâ€™on appelle son Â«â€¯cheminâ€¯Â» (*path*).

Exemple dâ€™un dossier Â«â€¯Vacancesâ€¯Â» :

- Unix : `/Document Personnel/Images/Vacances` 
- Windows : `C:\Dossier Personnel\Images\Vacances` 

Comprendre le fonctionnement global de lâ€™arborescence permet de se repÃ©rer dans son ordinateur.

### Nommer ses fichiers 

- Quelques bonnes pratiquesÂ : 
    - Les noms de fichier ne doivent pas contenir des caractÃ¨res spÃ©ciaux, ni des accents, ni des espacesÂ : lâ€™ordintateur ne les reconnaÃ®t pas immÃ©diatement, il doit les convertir, ce qui peut provoquer des erreursÂ ; 
    - Les noms des fichiers doivent Ãªtre significatifsÂ ; 
    - Les noms des fichiers ne doivent pas dÃ©passer 80 caractÃ¨resÂ ; 
    - Faites attention aux extensions de fichiersÂ ! Il est prÃ©fÃ©rable de ne pas les masquerÂ : information primordiale pour la machine ET les utilisateursÂ ; 
    - ExempleÂ : `2025-09-09-hnu2000-seance02.md`. 

<!--
Cette question pas si banale que Ã§a. Il existe des rÃ¨gles qui sont fondamentales pourÂ :
    - Classer un fichier ; 
    - Le retrouver facilement ; 
    - Partager ses fichiers avec dâ€™autres personnes ; 
    - Ã‰viter des problÃ¨mes de comptabilitÃ© dâ€™un systÃ¨me Ã  un autre.
--> 

### Chemins relatifs et chemins absolus {.scrollable}

Il est possible dâ€™indiquer Ã  la fois un chemin relatif, donc sans commencer par une barre oblique, ou en commenÃ§ant par une barre oblique pour un chemin absolu.

| Chemin absolu | Chemin relatif | 
| --- | --- | 
| /Users/Mathilde/Documents/Projet/index.html | ./Documents/Projet/index.html |
| Emplacement complet Ã  partir de la racine du systÃ¨me de fichiers | Chemin vers un fichier Ã  partir du rÃ©pertoire actul (```pwd```) | 
| Toujours valide, qu'importe le rÃ©pertoire | Change selon oÃ¹ je me situe dans mes fichiers |
| Commence nÃ©cessairement par `/` | Ne commence pas par `/` | 

AstucesÂ : 

- `/`Â : on descend d'un niveau dans la hiÃ©rarchie des rÃ©pertoiresÂ ; 
- `..` : on remonte vers un rÃ©pertoire parent. 

<!-- Un chemin d'accÃ¨s est dit absolu quand il est donnÃ© Ã  partir de la racine du dique dur; il est dit relatif quand il est donnÃ© Ã  partir de tout autre endroit du disque dur. -->

## Les premiÃ¨res commandes 

Quand je lance mon terminal, une invite de commande (*prompt*) apparaÃ®t, 

> *e.g.* `mathilde@crcen-mathilde-xps-13-7390:~`Â : 

- l'utilisateur `mathilde` est connectÃ©e sur l'ordinateur `crcen-mathilde-xps-13-7390`Â ; 
- le `~` indique qu'on se trouve dans le *home directory*. 

### OÃ¹ suis-je ? 

- pour savoir oÃ¹ l'on se trouveÂ : ```pwd```  
<!-- print working directory--> 

::: {.callout-note}
`pwd` nous retourne un chemin absolu: le chemin indiquÃ© commence en effet par une barre oblique. 
:::

### DÃ©placer un fichier 

- La commande ```mv <source> <destination>``` permet de renommer ou de dÃ©placer un fichierâ€¯(dans le terminal, câ€™est la mÃªme chose!)Â ; 
- ```mv mon-fichier.txt fichier.txt``` renomme le fichier `mon-fichier.txt` en `fichier.txt`Â ; 
- ```mv /home/utilisateur/hnu2000/mon-fichier.txt /home/utilisateur/Documents/``` dÃ©place le fichier `mon-fichier.txt`dans le dossier `Documents` (il doit exister prÃ©alablement!). 

<!-- windows: move --> 
<!-- `mv hnu2000/mon-fichier.txt . = dans rÃ©pertoire courant-->

### Naviguer dans ses fichiers 

- pour naviguerÂ : ```cd``` suivi du chemin, 
- exempleÂ : 
  - ```cd Documents/cours/hnu2000```Â ; 
  - `cd`Â : retour au *home directory*. 

::: {.callout-note}
Il est possible dâ€™indiquer Ã  la fois un chemin relatif, donc sans commencer par une barre oblique, ou en commenÃ§ant par une barre oblique pour un chemin absolu. 
:::

Remarquez le changement de l'invite aprÃ¨s l'exÃ©cution de la commande. 

<!-- change directory --> 

### Lister des fichiers 

- pour lister les fichiersÂ : ```ls```Â ; 
  - ex.Â : `ls Test/`> `fichier.txt`Â ; 
- pour lister les fichiers, dont les fichiers cachÃ©sÂ : ```ls -a```.

<!-- windows: dir --> 
<!-- list ; affiche Ã  l'Ã©cran tous les fichiers et les rÃ©pertoires contenus dans un rÃ©pertoire donnÃ©. Si on ne prÃ©cise pas le rÃ©pertoire, liste les fichiers du rÃ©pertoire courant. --> 

### CrÃ©er un dossier 

- `mkdir` + le nom du dossier (*MaKe DIRectory*).

### CrÃ©er un fichier 

- `touch` + le nom du fichier. 

### Supprimer un fichier 

- `rm mon-fichier.md`Â ; 
- `rm -R mon-dossier` supprime le dossier et tout ce qu'il contient.

### Afficher le contenu d'un fichier 

- `cat mon-fichier.md`. 

### Comprendre une commande 

- pour comprendre Ã  quoi sert une commande : ```man nom-de-la-commande``` (ex.Â : ```man rm```). 

### Quelques rÃ©flexes 

- La touche `TAB` complÃ¨te une commande ; 
- La flÃ¨che du haut parcourt les derniÃ¨res commandes utilisÃ©esÂ ; 
- CTRL + R pour rechercher une commande prÃ©cÃ©demment tapÃ©e ; la recherche se mettra Ã  jour au fur et Ã  mesure que vous tapez les premiÃ¨res lettres de la commandeÂ ; 
- CTRL + L ou ```clear``` pour repartir sur un *nouveau* terminal. 

### Exercice 

- crÃ©ez un dossier `HNU2000` (dans un dossier `Cours` par exemple) contenant un sous-dossier `02-exercice` contenant lui-mÃªme un fichier `exemple.txt` ; 
- naviguez dans le dossier `02-exercice` ; 
- revenez dans le dossier `Cours` ; 
- dÃ©placez le fichier `exemple.txt` dans le dossier `HNU2000` ; 
- renommez le fichier `exemple.txt` en `02_exercice1.txt` ; 
- supprimez le dossier `02-exercice`.  

### Quelques commandes avancÃ©es {.scrollable}

- `history`Â : Pour afficher et parcourir lâ€™historique des commandes que vous avez utilisÃ©es (seulement les commandes, pas les rÃ©sultats de ces commandes)Â ; 
- `less` + fichierÂ : Affiche le contenu d'un fichier page Ã  page (similaire Ã  `cat`, plus lisible), 
  - pour quitterÂ : `q`Â ! 
- `cp <source> <destination>` copie un fichier ou un dossierÂ : 
  - `cp HNU2000/texte.txt Documents/divers/textes/texte.txt`Â ; 
  - `cp -r textes Documents/divers`Â ;
- `wc` permet de compter le nombre de lignes, de mots et de caractÃ¨res dans un fichier texteÂ ; 
- `find` permet de chercher dans les noms de fichiers et dossiers, et dans les fichiers eux-mÃªmesÂ ; 
- `&&` pour enchaÃ®ner les commandes. 

<!-- windows: copy --> 

::: {.callout-tip}
Testez la commande suivante : ```curl http://wttr.in/MontrÃ©al\?lang\=fr```. Nous y reviendrons plus tard dans la session. 
:::

## Bash 

- InterprÃ©teur en ligne de commande d'Unix (= Linux, Mac) ; 
- Un *script* Bash (ou *shell*) est un fichier (en `.sh`) comportant plusieurs instructions/commandes ; 
- Celles-ce seront exÃ©cutÃ©es les unes aprÃ¨s les autresÂ ; 
- â†’ Automatisation des tÃ¢ches. 

<!--
Pour nous entraÃ®ner, nous utiliserons Bash en ligne, [Ã  cette adresse](https://www.onlinegdb.com/online_bash_shell).
--> 

### Exercices 


#### Renommer tous ses fichiers automatiquement 

Si vous dÃ©sirez ajouter `HNU` ou `vacances2025` devant chaque nom de fichier dans un dossier donnÃ©, crÃ©ez un scriptÂ : 

- CrÃ©ez (en ligne de commande), un fichier intitulÃ©Â `rename.sh`Â ; 
- Ajoutez-y le script suivant : 

```
#!/bin/bash
# Ajoute "hnu_" devant chaque fichier

for file in *; do
    if [ -f "$file" ]; then
        mv "$file" "hnu_$file"
    fi
done
```

- CrÃ©ez quelques fichiers de test (`touch test1.txt test2.txt`) ; 
- Faites tourner le script : `bash rename.sh`. 

</section>
<section>

#### Changer l'extension automatiquement 

Le scriptÂ : 

```
#!/bin/bash
# Change l'extension .md en .txt pour tous les fichiers

for file in *.md; do
    if [ -f "$file" ]; then
        mv "$file" "${file%.md}.txt"
    fi
done
```

</section>
<section>

#### GÃ©nÃ©rer du texte 

Testez plusieurs scripts Bash. Pour ce faire, crÃ©ez des fichiers `nom-du-fichier.sh`, ajoutez-y le contenu indiquÃ© ci-dessous, et faites les tourner en tapant, dans votre terminal, `bash nom-du-fichier.sh`Â : 

`echo "texte";` 

``` 
valeur="texte";
echo ${valeur}
``` 

``` 
valeur="texte";
echo "je suis du ${valeur}"
``` 

</section>
<section>

#### Jouer avec les commandes de base {.smaller}

- Afficher la dateÂ : 

```
horaire=`date`
echo "Jounal de bord du $horaire" 
```

- Afficher la situationÂ : 

```
lieu=`pwd`
echo "Je me trouve toujours Ã  bord du $lieu"
```

- Demander mon identitÃ© : (hors interface en ligne) 

```
identite=`whoami`
echo "Je me prÃ©nomme $identite"
```

- Aligner du texteÂ : 

```
T[0]='texte1'
T[1]='texte2'
echo ${T[0]} ${T[1]}
```

</section>
<section>

- CrÃ©ation d'une interactionÂ : 

```
echo "To be or not to beâ€¯?"
            select i in Ãªtre non-Ãªtre; do
                if [ "$i" = "Ãªtre" ]; then
                    echo "Sois";
                    break
                elif [ "$i" = "non-Ãªtre" ]; then
                    echo "Tant pis"
                    break
                else
                    echo "Pas de troisiÃ¨me choix dans ce script"
                fi
        done
```

::: {.callout-tip}
D'autres exemples [ici](https://frederic-junier.gitlab.io/parc-nsi/chapitre9/memento-shell/memento-shell-.pdf). 
:::

## WYSIWYM >< WYSIWYG ? 

Deux grandes familles de systÃ¨mes de saisie de documents textuels : 

| WYSIWYM | WYSIWYG | 
| --- | --- | 
| *What You See Is What You Mean* | *What You See Is What You Get* | 
| Ã©diteur de texte qui prÃ©sente le texte et ses informations de mise en forme sans les interprÃ©ter | Ã©diteur de texte quie prÃ©sente un texte enrichi **avec** sa mise en forme, de maniÃ¨re simultanÃ©e | 

> Le logiciel de traitement de texte *Word* est-il WYSIWYM ou WYSIWYG ? 

<!-- 
WYSIWYG: traitements de texte permettant de visualiser le rÃ©sultat produit au fur et Ã  mesure de leur Ã©ditionÂ ; 
WYSIWYM: ou plutot les systÃ¨mes non WYSIWYG qui nÃ©cessitent une interprÃ©tation (md html) ouune compilation pour produire un document final.
-->

### WYSIWYM {.scrollable}

- Moindre confusion entre mise en forme et indication de la structure logique ; 
- La mise en forme apparaÃ®t aprÃ¨s *parsing* du document (crÃ©ation d'un PDF ou ouverture dans un navigateur) ; 
- Le paramÃ©trage de la mise en forme peut Ãªtre gÃ©rÃ© dans un fichier externe (ex: CSS pour HTML). 

![](img/wysiwym_styles.png){.lightbox height="200"}

::: {.callout-note}
Si nous avons le temps, lecture en classe de [ce billet](https://eriac.hypotheses.org/80). 
:::

## Mettre en forme =/= structurer 

| Mise en forme | Structure logique | 
| --- | --- | 
| Du texte en gras | Un titre | 
| Du texte en italique | Un titre, un mot Ã©tranger | 
| Du texte entre guillements | Une citation | 

## VSCodium : installation et manipulations 

### Câ€™est quoi Codium ? 

- Version open source de Visual Studio Code (VS Code)

> VSCodium is a community-driven, freely-licensed binary distribution of Microsoftâ€™s editor VS Code.

- VS Code : Ã©diteur de code dÃ©veloppÃ© par Microsoft. Gratuit, lÃ©ger et puissant. Largement utilisÃ© par la communautÃ© des dÃ©veloppeurÂ·ses pour faire de la programmation.

### Extensions 

Suivre [ce tutoriel](https://fchambon.forge.apps.education.fr/classe/2-%C3%89diteurs/4-vscodium/#menus-en-francais) (pour installer ```French Language Pack for VS Code```, ```French - Code Spell Checker``` et ```LTeX```, Ã  configurer en franÃ§ais). 

::: {.content-visible when-format="revealjs"}

## Travaux citÃ©s 

:::
