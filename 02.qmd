# [Séance 2 : 09/09] COMPRENDRE son environnement {.unnumbered}

## Où sont les fichiers sur un ordinateur ? 

- Pourquoi c'est important ? 
  - Interactions facilités avec les différents fichiers constituant un projet; 
  - Liens (relatifs et/ou absolus) entre fichiers 

### Arborescence 

- Chaque système d’exploitation a son propre système d’organisation ; 
- Il faut comprendre les systèmes de chemin ; 
- Tout est arborescence 

![Arborescence sur un système Ubuntu](img/tree.jpg)


Il faut d’abord comprendre comment est organisé votre ordinateur et où se trouvent vos fichiers. Votre disque dur peut être compris comme une grande boîte dans laquelle se trouvent d’autres boîtes (dossiers). La boîte principale est ce qu’on appelle « racine ». Dans un ordinateur Unix (Mac ou Linux) la racine est /. Dans un ordinateur Windows, la racine est C:/. Dans la racine vous trouvez plusieurs « boîtes ».

L’emplacement du Dossier correspond à ce qu’on appelle son « chemin » (*path*).

Exemple d’un dossier « Vacances » :

- Unix : `/Document Personnel/Images/Vacances` 
- Windows : `C:/Dossier Personnel/Images/Vacances` 

Comprendre le fonctionnement global de l’arborescence permet de se repérer dans son ordinateur.

### Nommer ses fichiers 

- Quelques bonnes pratiques : 
    - Les noms de fichier ne doivent pas contenir des caractères spéciaux, ni des accents, ni des espaces : l’ordintateur ne les reconnaît pas immédiatement, il doit les convertir, ce qui peut provoquer des erreurs ; 
    - Les noms des fichiers doivent être significatifs ; 
    - Les noms des fichiers ne doivent pas dépasser 80 caractères ; 
    - Faites attention aux extensions de fichiers ! Il est préférable de ne pas les masquer : information primordiale pour la machine ET les utilisateurs.
    - Exemple : 2024-10-04-hnu2000-seance02.md

Cette question pas si banale que ça. Il existe des règles qui sont fondamentales pour :
    - Classer un fichier ; 
    - Le retrouver facilement ; 
    - Partager ses fichiers avec d’autres personnes ; 
    - Éviter des problèmes de comptabilité d’un système à un autre.

### Stockage 

### Chemins relatifs et chemins absolus 

Il est possible d’indiquer à la fois un chemin relatif, donc sans commencer par une barre oblique, ou en commençant par une barre oblique pour un chemin absolu.

| Chemin absolu | Chemin relatif | 
| --- | --- | 
| /Users/Mathilde/Documents/Projet/index.html | ./Documents/Projet/index.html |
| Emplacement complet à partir de la racine du système de fichiers | Chemin vers un fichier à partir du répertoire actul (```pwd```) | 
| Toujours valide, qu'importe le répertoire | Change selon où je me situe dans mes fichiers |

### Bonnes pratiques 

## Usages basiques d'un terminal 

### Définition 

Le ***terminal*** que nous allons manipuler fait référence au logiciel avec lequel nous pouvons taper des lignes de commandes afin d’interagir avec le *système d’exploitation*.  

> Un terminal est un programme qui émule une console dans une interface graphique, il permet de lancer des commandes. ([Doc. Ubuntu](https://doc.ubuntu-fr.org/terminal))

→ Soit, l’*OS*, le « logiciel faisant office d’interface [(graphique)] entre les composants informatiques et l’utilisateur, qui assure notamment l’exécution des programmes, l’allocation des ressources matérielles et le contrôle des opérations d’entrée-sortie sur les périphériques. » ([OQLF 2022](https://vitrinelinguistique.oqlf.gouv.qc.ca/fiche-gdt/fiche/8358548/systeme-dexploitation)).

### Intérêts 

- Rapidité et efficacité 
- Automatisation (scripts) 
- Contrôle avancé 

### Ouvrir un terminal 

Sous Linux ou Mac : chercher « Terminal » parmi les applications.

Sous Windows, activez le terminal/bash en suivant [ces instructions](https://korben.info/installer-shell-bash-linux-windows-10.html) ou [celles-ci](https://blog.ineat-group.com/2020/02/utiliser-le-terminal-bash-natif-dans-windows-10/). 

### Où suis-je ? 

- pour savoir où l'on se trouve : ```pwd```  

::: {.callout-note}
`pwd` nous retourne un chemin absolu: le chemin indiqué commence en effet par une barre oblique. 
:::

### Lister des fichiers 

- pour lister les fichiers : ```ls``` 
- pour lister les fichiers, dont les fichiers cachés : ```ls -a```

### Naviguer dans ses fichiers 

- pour naviguer : ```cd``` suivi du chemin, 
- exemple : ```cd Documents/cours/hnu2000```  

::: {.callout-note}
Il est possible d’indiquer à la fois un chemin relatif, donc sans commencer par une barre oblique, ou en commençant par une barre oblique pour un chemin absolu. 
:::

### Comprendre une commande 

- pour comprendre à quoi sert une commande : ```man nom-de-la-commande``` (ex. : ```man rm```)

### Quelques réflexes 

- La touche `TAB` complète une commande ; 
- La flèche du haut parcourt les dernières commandes utilisées ; 
- CTRL + R pour rechercher une commande précédemment tapée ; la recherche se mettra à jour au fur et à mesure que vous tapez les premières lettres de la commande ; 
- CTRL + L ou ```clear``` pour repartir sur un *nouveau* terminal. 

### Déplacer un fichier 

- La commande ```mv``` permet de renommer ou de déplacer un fichier (dans le terminal, c’est la même chose!) ; 
- ```mv mon-fichier.txt fichier.txt``` renomme le fichier `mon-fichier.txt` en `fichier.txt` ; 
- ```mv /home/utilisateur/hnu2000/mon-fichier.txt /home/utilisateur/Documents/mon-fichier.txt``` déplace le fichier `mon-fichier.txt`dans le dossier `Documents` (il doit exister préalablement!). 

### Créer un dossier 

- `mkdir` + le nom du dossier (*MaKe DIRectory*) 

### Créer un fichier 

- `touch` + le nom du fichier  

### Supprimer un fichier 

- `rm mon-fichier.md` ; 
- `rm -R mon-dossier` supprime le dossier et tout ce qu'il contient.

### Afficher le contenu d'un fichier 

- `cat mon-fichier.md` 

### Exercice 

- créez un dossier `HNU2000` (dans un dossier `Cours` par exemple) contenant un sous-dossier `02-exercice` contenant lui-même un fichier `exemple.txt` ; 
- naviguez dans le dossier `02-exercice` ; 
- revenez dans le dossier `Cours` ; 
- déplacez le fichier `exemple.txt` dans le dossier `HNU2000` ; 
- renommez le fichier `exemple.txt` en `02_exercice1.txt` ; 
- supprimez le dossier `02-exercice`.  


### Quelques commandes avancées 

- `history` : Pour afficher et parcourir l’historique des commandes que vous avez utilisées (seulement les commandes, pas les résultats de ces commandes) ; 
- `less` + fichier : Affiche le contenu d'un fichier page à page (similaire à `cat`, plus lisible), 
  - pour quitter: `q` ! 
- `cp` copie un fichier ou un dossier : 
  - `cp HNU2000/texte.txt Documents/divers/textes/texte.txt` ;  
  - `cp -r textes Documents/divers` ;
- `wc` permet de compter le nombre de lignes, de mots et de caractères dans un fichier texte ; 
- `find` permet de chercher dans les noms de fichiers et dossiers, et dans les fichiers eux-mêmes ;  
- `&&` pour enchaîner les commandes. 

::: {.callout-tip}
Testez la commande suivante : ```curl http://wttr.in/Montréal\?lang\=fr```. Nous y reviendrons plus tard dans la session. 
:::

### Bash 

## WYSIWYM >< WYSIWYG ? 

### Définitions 

### VSCodium : installation et manipulations 